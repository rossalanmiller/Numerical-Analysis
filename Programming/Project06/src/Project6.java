import java.lang.Math;
import java.text.DecimalFormat;

public class Project6
{
	
	public static double f(double x)
	{
		return (2.0-Math.pow(Math.E, x) + Math.pow(x, 2))/3.0;
	}
						//f prime
	public static double fp(double x)
	{
		return (2.0*x - Math.pow(Math.E, x))/3.0;
	}
	//Newton's method
	public static double Newtons(double p)
	{
		return p - (f(p)/fp(p));
	}
	//Secants method
	public static double Secants(double pnm1, double pnm2)
	{
		return pnm1 - (f(pnm1)*(pnm1 - pnm2))/(f(pnm1) - f(pnm2));
	}
	
	//prints each row of the table nicely formated
	public static void printRow(int i, double Pn, double Phat, double PSM1, double PSM2)
	{
		DecimalFormat fmt = new DecimalFormat("#0.00000");
		
		String rowstr = String.format("%02d ", i);
		rowstr += String.format("%12s", fmt.format(Pn));
		rowstr += String.format("%10s", fmt.format(Phat));	
		rowstr += String.format("%12s", fmt.format(PSM1));
		rowstr += String.format("%12s", fmt.format(PSM2));
		System.out.println(rowstr);
	}
	
	//returns a string consisting of a given string s n times
	public static String repeat(String s, int n)
	{
		String str = String.format("%0" + n + "d", 0);
		str = str.replace("0", s);
		return str;
	}
	
	//Prints a formated header for our table
	public static void printHeader(double E, double P0)
	{
		DecimalFormat fmt = new DecimalFormat("#.00");
		String header = "";
		header = String.format("%2s |", "n");
		header += String.format("%9s  |","Pn");
		header += String.format("%9s  |", "P" + '\u0302' + "n");
		header += String.format("%12s|", "    P\u0302n-1      P\u0302n-2    ");
		System.out.println(header);
		System.out.println(repeat("-",50));
		
	}
	
	
	public static void main(String[] args) 
	{
		double P0 = 1.5;						//Set P0
		double E = 1e-5;					//Set our tolerance
		
		double PSM2 = Newtons(P0);			// calculate the first two terms for the secant method by
		double PSM1 = Newtons(PSM2);		// generating them from newtons method
											//
		
		double Pn = Newtons(P0);			// set first term for newtons method from P0
		double Ps = Secants(PSM1, PSM2);	// set first term for Secants method from the two previous
											// terms generated by newtons method
		int count = 1;
		printHeader(E,P0);
		
		// begin our iterations
		while(Math.abs(Pn - P0) > E || Math.abs(Ps - PSM1) > E)	//While either function is below the tolerance E
		{
			if(count == 1)
				printRow(count, Pn, 0, PSM1,0);
			else if(count == 2)
				printRow(count, Pn, 0, PSM1, PSM2);
			else
			{
				printRow(count, Pn, Ps,PSM1,PSM2);
				PSM2 = PSM1;
				PSM1 = Ps;
				Ps = Secants(PSM1, PSM2);
			}
			P0 = Pn;
			Pn = Newtons(P0);
			
			count++;
		}
		printRow(count, Pn, Ps, PSM1, PSM2);
		
		
	}
}
