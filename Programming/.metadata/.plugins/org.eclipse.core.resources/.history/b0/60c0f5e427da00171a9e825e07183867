//////////////////////////////////////////////
//	Name:		Ross Miller
//	Date:		12/1/17
//	Purpose:	To solve system's of equations
//				using Newton's and Quasi
//				newton's method
//////////////////////////////////////////////



import java.util.function.*;
import java.text.DecimalFormat;
import java.util.Arrays;


public class Project10
{
	/*Start off with the initial system of equations*/
	static double f1(double[] x)
	{
		return Math.pow(x[0], 2)-10.0*x[0] + Math.pow(x[1], 2)+ 8;
	}
	static double f2(double[] x)
	{
		return x[0]*x[1] + x[0] - 10.0*x[1] + 8;
		
	}
	/*
	static double f3(double[] x)
	{
		//return Math.pow(Math.E, -x[0]*x[1]) + 20.0*x[2] + (10*Math.PI-3)/3.0;
		//return x[0] + x[1] + x[2] - 3;
		return -Math.pow(x[0], 2) + 0.1*Math.pow(x[1], 2) + .01*x[1] + x[2] - 1;
	}
	/*end initial systems of equatiolns*/
	
	/* All the partial derivatives for f1, f2, and f3*/
	static double pf1x1(double[] x)
	{
		return 2.0*x[0] - 10;
	}
	static double pf1x2(double[] x)
	{
		return 2.0*x[1];
	}
	static double pf1x3(double[] x)
	{
		return 0;
		//return -x[0]*x[1]*Math.sin(x[0]*x[1]*x[2]);
	}
	static double pf2x1(double[] x)
	{
		return x[1] + 1;
	}
	static double pf2x2(double[] x)
	{
		return x[0] - 10;
	}
	static double pf2x3(double[] x)
	{
		return 0;
		//return .1*x[2] - .15;
	}
	static double pf3x1(double[] x)
	{
		//return 1;
		return -2*x[0];
	}
	static double pf3x2(double[] x)
	{
		//return 1;
		return .2*x[1]+.01;
	}
	static double pf3x3(double[] x)
	{
		//return 1;
		return 1;
	}
	/*end partial derivatives */
	
	/*calculates the J matrix given an x from all the partial 
	 * derivatives of x
	 */
	static double[][] getJMatrix(double[] x)
	{
		double[][] J =  {
						{pf1x1(x), pf1x2(x), pf1x3(x)},
						{pf2x1(x), pf2x2(x), pf2x3(x)},
						{pf3x1(x), pf3x2(x), pf3x3(x)}};
		
		return J;
	}
	
	/*calculates an approximation of the J matrix using x, f1, f2, and f3, and the 
	 * value of h
	 */
	static double[][] getJMatrixApprox(double[] x, ToDoubleFunction[] funcArray, double h)
	{
		double[][] J =  new double[x.length][x.length];
		
		for(int r = 0; r < J.length; r++)
		{
			for(int c = 0; c < J[0].length; c++)
			{
				double[] e = new double[x.length];
				e[c] = 1*h;
				J[r][c] = (funcArray[r].applyAsDouble(addVec(x, e)) - funcArray[r].applyAsDouble(x))/h;
			}
		}
		return J;
	}
	
	static double[] getFhatVector(double[] x)
	{
		//double[] F = {-f1(x), -f2(x), -f3(x)};
		double[] F = {-f1(x), -f2(x)};
		return F;
	}
	
	
	static void print2DArray(double[][] A)
	{
		for(int i = 0; i < A.length; i++)
		{
			System.out.print("[ ");
			for(int j = 0; j < A[0].length; j++)
			{
				System.out.print(A[i][j] + ", ");
			}
			System.out.println(" ]");
		}
	}
	
	static double[] applyOpToVectors(double[] x, DoubleBinaryOperator op, double[] y)
	{
		double[] temp = new double[x.length];
		for(int i = 0; i < temp.length; i++)
		{
			double val = op.applyAsDouble(x[i], y[i]);
			temp[i] = val;
		}
		return temp;
	}
	
	static double[] addVec(double[] x, double[] y)
	{
		return applyOpToVectors(x, (a,b) -> (a+b), y);
	}
	
	static double[] subVec(double[] x, double[] y)
	{
		return applyOpToVectors(x, (a,b) -> (a-b), y);
	}
	
	static double[] copyVec(double[] x)
	{
		return applyOpToVectors(x, (a,b) -> (a+0), x);
	}
	
	/* Returns the supremum norm of a vector */
	static double getNorm(double[] x)
	{
		double[] t = copyVec(x);
		Arrays.sort(t);
		return Math.abs(t[t.length-1]);
	}
	
	/* Prints one row of our iteration */
	public static void printRow(int i, double[] xn, double norm)
	{
		DecimalFormat fmt = new DecimalFormat("#0.000");
		
		String rowstr = String.format("%02d ", i);
		for(int j = 0; j < xn.length; j++)
		{
			rowstr += String.format("%10s", fmt.format(xn[j]));
		}
		rowstr += String.format("%15s", fmt.format(norm));
		System.out.println(rowstr);
	}
	
	/*Repeats the given string s n times */
	public static String repeat(String s, int n)
	{
		String str = String.format("%0" + n + "d", 0);
		str = str.replace("0", s);
		return str;
	}
	
	//Prints a formated header for our table
	public static void printHeader()
	{
		//DecimalFormat fmt = new DecimalFormat("#.00");
		String header = "";
		header = String.format("%2s|", "k");
		header += String.format("%9s|","x1");
		header += String.format("%9s|", "x2");
		//header += String.format("%9s|", "x3");
		header += String.format("%20s", "norm(x(n)-x(n-1))");
		System.out.println(header);
		System.out.println(repeat("-",53));
		
	}
	
	/*calculates the dot product of two vectors, used
	 * to calculate the a matrix product
	 */
	public static double dotProduct(double[] U, double[] V)
	{
		double result = 0;
		for(int row = 0; row < U.length; row++)
		{
			result += U[row]*V[row];
		}
		return result;
	}
	
	
	/* Performs a rudimentary row operation on two ros
	 * of a linear system
	 */
	public static double[] rowOp(double[] source, double multiplyer, double[] dest)
	{
		double[] newRow = copyVec(source);
		for(int i = 0; i < newRow.length; i++)
		{
			newRow[i] = newRow[i]*multiplyer;
		}
		newRow = addVec(newRow, dest);
		return newRow;
	}
	
	
	/* given a linear sytem and the index of a diagonal with
	 * a zero cofactor performs a row operation to "repair it"
	 */
	public static void repairRow(double[][] system, int row)
	{
		for(int i = 0; i < system.length; i++)
		{
			if(system[i][row] != 0)
			{
				system[row] = rowOp(system[i], 1, system[row]);
				break;
			}
		}
	}
	
	/* Solves a linear system where the system is matrix of n*(n+1)*/
	public static double[] solveLinearSystem(double[][] system)
	{
		for(int r = 0; r < system.length; r++)
		{
			// if the sytem has a zero in the expected pivot column
			// then find the first row with a non-zero number in that
			// column and perfrom row operations
			if(system[r][r] == 0)
			{
				repairRow(system, r);
			}
			
			/* This loop takes the repaired row at row r and performs
			 * gaussian elimination on all other rows so that at the
			 * end we're left with a diagnoal matrix
			 */
			for(int r2 = 0; r2 < system.length; r2++)
			{
				if(r != r2)
				{
					double multiplyer = -(system[r2][r]/system[r][r]);
					system[r2] = rowOp(system[r], multiplyer, system[r2]);
				}
			}
		}
		
		double[] result = new double[system.length];
		for(int i = 0; i < result.length; i++)
		{
			result[i] = system[i][system.length]/system[i][i];
		}
		return result;
	}
	
	/* Cobines the J matrix and Fhat into a single system
	 */
	public static double[][] toSystem(double[][] J, double[] Fhat)
	{
		double[][] result = new double[J.length][J[0].length+1];
		
		for(int r = 0; r < J.length; r++)
		{
			for(int c = 0; c < J[0].length; c++)
			{
				result[r][c] = J[r][c];
			}
		}
		
		for(int i = 0; i < Fhat.length; i++)
		{
			result[i][result.length] = Fhat[i];
		}
		
		return result;
	}
	

	static void repairSystem(double[][] system)
	{
		for(int r = 0; r < system.length; r++)
		{
			// if the sytem has a zero in the expected pivot column
			// then find the first row with a non-zero number in that
			// column and preform row operations
			if(system[r][r] == 0)
			{
				repairRow(system, r);
			}
		}
	}
	
	/* solves the linear system of Jy = Fhat for y*/
	public static double[] solveForY(double[][] J, double[] Fhat)
	{
		double[][] system = toSystem(J, Fhat);
		double[] result2 = solveLinearSystem(system);
		return result2;
	}
	
	/* solves a non linear system using exact partial
	 * derivatives for J
	 */
	public static void solveUsingNewtons(double E, double[] guess)
	{
		double[] x0 = guess; 
		double[][] J = getJMatrix(x0);
		double[] Fhat = getFhatVector(x0);
		double[] y = solveForY(J, Fhat);
		double[] xn = addVec(x0,  y);
		
		printHeader();
		int count = 1;
		while(getNorm(subVec(xn, x0)) > E)
		{
			printRow(count, xn, getNorm(subVec(xn, x0)));
			x0 = copyVec(xn);
			J = getJMatrix(x0);
			Fhat = getFhatVector(x0);
			y = solveForY(J, Fhat);
			xn = addVec(x0, y);
			count++;
		}
		printRow(count, xn, getNorm(subVec(xn, x0)));
	}
	
	/* solves a non-linear system using an approximate
	 * calculation for J
	 */
	public static void solveUsingQuasiNewtons(double E, double h, double[] guess)
	{
		ToDoubleFunction<double[]> func1 = (a) -> f1(a);
		ToDoubleFunction<double[]> func2 = (a) -> f2(a);
		//ToDoubleFunction<double[]> func3 = (a) -> f3(a);
		
		//ToDoubleFunction[] funcArray = {func1,func2,func3};
		ToDoubleFunction[] funcArray = {func1,func2};
		
		double[] x0 = guess;
		double[][] J = getJMatrixApprox(x0, funcArray, h);
		double[] Fhat = getFhatVector(x0);
		double[] y = solveForY(J, Fhat);
		double[] xn = addVec(x0,  y);
		
		printHeader();
		int count = 1;
		while(getNorm(subVec(xn, x0)) > E)
		{
			printRow(count, xn, getNorm(subVec(xn, x0)));
			x0 = copyVec(xn);
			J = getJMatrixApprox(xn, funcArray, h);
			Fhat = getFhatVector(x0);
			y = solveForY(J, Fhat);
			xn = addVec(x0, y);
			count++;
		}
		printRow(count, xn, getNorm(subVec(xn, x0)));
	}
	
	public static void main(String[] args)
	{
		double h = 1e-5;
		double E = 1e-9;
		double[] x0 = {0,0};
		solveUsingNewtons(E, x0);
		System.out.println();
		solveUsingQuasiNewtons(E, h, x0);
	}
}
