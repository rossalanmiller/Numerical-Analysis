import java.lang.Math;
import java.text.DecimalFormat;

public class Project3
{
	
	//our function (e^x) - x - 1
	public static double f(double x)
	{
		return Math.pow(x, 3.0) - x - 1;
	}
	//our derivative (e^x) - 1
	public static double fp(double x)
	{
		return Math.pow(3.0*x, 2) - 1;
	}
	//Newton's method
	public static double Newtons(double p)
	{
		return p - (f(p)/fp(p));
	}
	//Secants method
	public static double Secants(double pnm1, double pnm2)
	{
		return pnm1 - (f(pnm1)*(pnm1 - pnm2))/(f(pnm1) - f(pnm2));
	}
	
	//prints each row of the table nicely formated
	public static void printRow(int i, double Pn, double Phat)
	{
		DecimalFormat fmt = new DecimalFormat("#0.00000");
		
		String rowstr = String.format("%02d ", i);
		rowstr += String.format("%15s", fmt.format(Pn));
		rowstr += String.format("%15s", fmt.format(Phat));		
		System.out.println(rowstr);
	}
	
	//returns a string consisting of a given string s n times
	public static String repeat(String s, int n)
	{
		String str = String.format("%0" + n + "d", 0);
		str = str.replace("0", s);
		return str;
	}
	
	//Prints a formated header for our table
	public static void printHeader(double E)
	{
		DecimalFormat fmt = new DecimalFormat("#.00");
		String header = "";
		header = String.format("%2s  |", "n");
		header += String.format("%15s  |","Pn");
		header += String.format("%12s  |", "P" + '\u0302');
		System.out.println(header);
		System.out.println(repeat("-",37));
		
	}
	
	
	public static void main(String[] args) 
	{
		double P0 = 1;						//Set P0
		double E = 1e-6;					//Set our tolerance
		
		//double PSM2 = Newtons(P0);			// calculate the first two terms for the secant method by
		//double PSM1 = Newtons(PSM2);		// generating them from newtons method
											//
		
		double Pn = Newtons(P0);			// set first term for newtons method from P0
		//double Ps = Secants(PSM1, PSM2);	// set first term for Secants method from the two previous
											// terms generated by newtons method
		int count = 1;
		printHeader(E);
		
		while(Math.abs(Pn - P0) > E)
		{
			printRow(count, Pn, Math.abs(Pn-P0));
			P0 = Pn;
			Pn = Newtons(P0);
			count++;
		}
		/*
		while(Math.abs(Pn - P0) > E || Math.abs(Ps - PSM1) > E)	//While either function is below the tolerance E
		{
			if(count <= 2)
				printRow(count, Pn, 0);
			else
			{
				if(count%2==0)
					printRow(count, Pn, Ps);
				PSM2 = PSM1;
				PSM1 = Ps;
				Ps = Secants(PSM1, PSM2);
			}
			P0 = Pn;
			Pn = Newtons(P0);
			
			count++;
		}
		*/
		printRow(count, Pn, 0);
		
		
	}
}
